// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package archrepo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepoServiceClient is the client API for RepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoServiceClient interface {
	CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error)
}

type repoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoServiceClient(cc grpc.ClientConnInterface) RepoServiceClient {
	return &repoServiceClient{cc}
}

func (c *repoServiceClient) CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error) {
	out := new(CreatePackageResponse)
	err := c.cc.Invoke(ctx, "/archrepo.RepoService/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoServiceServer is the server API for RepoService service.
// All implementations must embed UnimplementedRepoServiceServer
// for forward compatibility
type RepoServiceServer interface {
	CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error)
	mustEmbedUnimplementedRepoServiceServer()
}

// UnimplementedRepoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepoServiceServer struct {
}

func (UnimplementedRepoServiceServer) CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedRepoServiceServer) mustEmbedUnimplementedRepoServiceServer() {}

// UnsafeRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServiceServer will
// result in compilation errors.
type UnsafeRepoServiceServer interface {
	mustEmbedUnimplementedRepoServiceServer()
}

func RegisterRepoServiceServer(s grpc.ServiceRegistrar, srv RepoServiceServer) {
	s.RegisterService(&RepoService_ServiceDesc, srv)
}

func _RepoService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archrepo.RepoService/CreatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).CreatePackage(ctx, req.(*CreatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoService_ServiceDesc is the grpc.ServiceDesc for RepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archrepo.RepoService",
	HandlerType: (*RepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePackage",
			Handler:    _RepoService_CreatePackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seankhliao/archrepo/v1alpha1/archrepo.proto",
}
